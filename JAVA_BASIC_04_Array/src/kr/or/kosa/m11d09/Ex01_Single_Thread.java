package kr.or.kosa.m11d09;
/*
    쓰레드에 대한 이해를 하기 위해서는 프로그램에 대해서 알아야합니다.
    프로그램은 실행이 되면, 프로세스가 됩니다.
    프로세스가 동작하기 위해서는 최소 1개의 쓰레드가 필요합니다.

    자바도 마찬가지입니다.
    자바도 JVM이 Thread 하나를 생성(stack) 해서 main 메서드가 할당됩니다.

    지금까지 싱글 프로세스를 사용했다고 생각할 수 있는데요.
    사실 여러 프로세스를 사용했다면, 내부적으로 여러 쓰레드가 사용되고 있었을 수도 있습니다.

    우리가 프로그램을 실행하면 OS로부터 메모리를 빌려와서 갖고 있게 됩니다.

    Stack 이라는 여역이 생성되는데, 이 Stack 영역을 우리는 Thread 라고 봐도 무방합니다.
    그래서 멀티 쓰레드라는 얘기는 stack 이 여러개라고 봐도 무방합니다.

    쓰레드가 여러개 생성되고, 각 쓰레드에 메서드들이 올라가있으면,
    해당 메서드들은 동시에 실행된다고 할 수 있습니다.

    쓰레드를 공부하다보면 난해한 단어가 있습니다.

    동시성 & 병렬성 이 그렇습니다,
    동시성
        하나의 Core를 여러 개의 쓰레드가 나누어서 쓰는 것입니다.
        즉, 하나의 Core 라는 꼬치에 쓰레드가 꽂혀있는 형식인데,
        너무 빠르게 돌아가면서 실행되기 때문에 우리는 동시에
        실행된다고 느끼게 됩니다.
    병렬성
        병렬성은 실제로 Core 가 여러 개인 상황입니다.
        멀티 코어에서 개별 스레드를 처리하는 것을 의미합니다.

    자바에서 병렬 처리를 지원하는 것에는 Stream 이 있습니다.
 */
public class Ex01_Single_Thread {
    public static void main(String[] args) {
        /*
            main 메서드는 싱글 쓰레드인데요.
            동시 작업이 불가능하다는 의미입니다.

            쓰레드 라는 말이 어려운데요.
            스택의 관점으로 살펴보면 이해가 쉬워집니다.
            단일 스택이니까, 스택에서 최상위 메서드만 실행되죠.
            그러니까 한번에 하나의 메서드만 실행될 수 있는 것이죠.

            결국, stack 메모리에서 실행되는
            즉, 단일 스레드에서 동작하는 메서드들은
            모두 순서대로,
            즉, sequential programming 을 했다고 얘기할 수 있습니다.

            멀티 쓰레드라는 얘기는
            즉, stack 이 여러개라는 의미입니다.

            하나의 Cpu는, 한번에 하나의 쓰레드밖에 실행가능합니다.
            그런데, 시간을 나누어서 작업을 할 수는 있는데요.
            그래서, 여러 개의 Stack 메모리들이
            실행 가능한 상태라면, 즉, runnable 상태라면,
            stack 들이 돌아가면서 cpu를 점유해서 사용할 수 있는
            상태가 됩니다.

            여기서 재밌는 점은 쓰레드별로 할당되는 cpu 점유 시간이
            다르다는 점인데요. 그래서 쓰레드 5개를 만들었다는 얘기는
            경주마 5마리를 만든 것과 다릅니다. 5개의 경주마가 자신의
            작업을 완성하기 위해서 경쟁하게 되는 것이죠.

         */
        System.out.println("일꾼1");
        worker();
        worker2();
    }

    static void worker() {System.out.println("일꾼2");}
    static void worker2() {System.out.println("일꾼3");}
}
